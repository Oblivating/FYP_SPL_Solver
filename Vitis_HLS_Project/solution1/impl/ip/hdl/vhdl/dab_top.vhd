-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dab_top is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    s1 : IN STD_LOGIC_VECTOR (0 downto 0);
    s2 : IN STD_LOGIC_VECTOR (0 downto 0);
    out_xL : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_xL_ap_vld : OUT STD_LOGIC;
    out_xC1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_xC1_ap_vld : OUT STD_LOGIC;
    out_xC2 : OUT STD_LOGIC_VECTOR (63 downto 0);
    out_xC2_ap_vld : OUT STD_LOGIC );
end;


architecture behav of dab_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dab_top_dab_top,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.994065,HLS_SYN_LAT=14,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=4841,HLS_SYN_LUT=3465,HLS_VERSION=2023_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (27 downto 0) := "0000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (27 downto 0) := "0000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (27 downto 0) := "0000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (27 downto 0) := "0000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (27 downto 0) := "0000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (27 downto 0) := "0000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (27 downto 0) := "0001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (27 downto 0) := "0010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (27 downto 0) := "0100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (27 downto 0) := "1000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv50_0 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv84_A3D70A3D4 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000101000111101011100001010001111010100";
    constant ap_const_lv111_640000000000 : STD_LOGIC_VECTOR (110 downto 0) := "000000000000000000000000000000000000000000000000000000000000000011001000000000000000000000000000000000000000000";
    constant ap_const_lv172_lc_1 : STD_LOGIC_VECTOR (171 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111001101010001000011101000110000101000111101011100100111110010100";
    constant ap_const_lv175_lc_2 : STD_LOGIC_VECTOR (174 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010011111000101001110000000000000000000000000000000000000000000";
    constant ap_const_lv177_lc_3 : STD_LOGIC_VECTOR (176 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101001111100010100111000000000000000000000000000000000000000000000";
    constant ap_const_lv65_2580000000000 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000010010110000000000000000000000000000000000000000000";
    constant ap_const_lv65_1900000000000 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000001100100000000000000000000000000000000000000000000";
    constant ap_const_lv41_0 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000000";
    constant ap_const_lv120_0 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_AC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101100";
    constant ap_const_lv53_1F6A0000000000 : STD_LOGIC_VECTOR (52 downto 0) := "11111011010100000000000000000000000000000000000000000";
    constant ap_const_lv53_6E0000000000 : STD_LOGIC_VECTOR (52 downto 0) := "00000011011100000000000000000000000000000000000000000";
    constant ap_const_lv49_6E0000000000 : STD_LOGIC_VECTOR (48 downto 0) := "0011011100000000000000000000000000000000000000000";
    constant ap_const_lv40_0 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000000";
    constant ap_const_lv32_B7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110111";
    constant ap_const_lv32_B6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal solver_state : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal solver_vE_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    signal solver_vE_1 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    signal solver_xL : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000000000";
    signal solver_xC1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal solver_xC2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal solver_iJ_0 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000000";
    signal solver_iJ_1 : STD_LOGIC_VECTOR (49 downto 0) := "00000000000000000000000000000000000000000000000000";
    signal solver_state_load_load_fu_208_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal solver_state_load_reg_620 : STD_LOGIC_VECTOR (0 downto 0);
    signal solver_xL_load_reg_630 : STD_LOGIC_VECTOR (48 downto 0);
    signal add_ln55_fu_232_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln55_reg_641 : STD_LOGIC_VECTOR (62 downto 0);
    signal sub_ln83_fu_247_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal sub_ln83_reg_652 : STD_LOGIC_VECTOR (64 downto 0);
    signal sub_ln84_fu_257_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal sub_ln84_reg_657 : STD_LOGIC_VECTOR (64 downto 0);
    signal shl_ln2_fu_312_p3 : STD_LOGIC_VECTOR (103 downto 0);
    signal shl_ln2_reg_662 : STD_LOGIC_VECTOR (103 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_178_p2 : STD_LOGIC_VECTOR (83 downto 0);
    signal mul_ln64_reg_667 : STD_LOGIC_VECTOR (83 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln64_fu_326_p2 : STD_LOGIC_VECTOR (104 downto 0);
    signal add_ln64_reg_672 : STD_LOGIC_VECTOR (104 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_193_p2 : STD_LOGIC_VECTOR (171 downto 0);
    signal mul_ln64_1_reg_682 : STD_LOGIC_VECTOR (171 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal trunc_ln3_reg_687 : STD_LOGIC_VECTOR (52 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln66_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_reg_693 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal select_ln69_fu_387_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal select_ln69_reg_698 : STD_LOGIC_VECTOR (48 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_183_p2 : STD_LOGIC_VECTOR (110 downto 0);
    signal mul_ln83_reg_714 : STD_LOGIC_VECTOR (110 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_188_p2 : STD_LOGIC_VECTOR (110 downto 0);
    signal mul_ln84_reg_719 : STD_LOGIC_VECTOR (110 downto 0);
    signal add_ln83_fu_475_p2 : STD_LOGIC_VECTOR (110 downto 0);
    signal add_ln83_reg_724 : STD_LOGIC_VECTOR (110 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal add_ln84_fu_496_p2 : STD_LOGIC_VECTOR (110 downto 0);
    signal add_ln84_reg_729 : STD_LOGIC_VECTOR (110 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_fu_198_p2 : STD_LOGIC_VECTOR (174 downto 0);
    signal mul_ln83_1_reg_744 : STD_LOGIC_VECTOR (174 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_203_p2 : STD_LOGIC_VECTOR (176 downto 0);
    signal mul_ln84_1_reg_749 : STD_LOGIC_VECTOR (176 downto 0);
    signal trunc_ln_reg_754 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal trunc_ln1_reg_759 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_solver_xL_loc_0_phi_fu_140_p4 : STD_LOGIC_VECTOR (48 downto 0);
    signal solver_xL_loc_0_reg_137 : STD_LOGIC_VECTOR (48 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_phi_mux_solver_xC1_loc_0_phi_fu_149_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal solver_xC1_loc_0_reg_146 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_solver_xC2_loc_0_phi_fu_159_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal solver_xC2_loc_0_reg_156 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_storemerge_phi_fu_170_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal storemerge_reg_166 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln74_fu_414_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal select_ln75_fu_427_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_178_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal grp_fu_183_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_188_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_193_p1 : STD_LOGIC_VECTOR (68 downto 0);
    signal grp_fu_198_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal grp_fu_203_p1 : STD_LOGIC_VECTOR (66 downto 0);
    signal sext_ln83_fu_243_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln83_fu_243_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal sext_ln84_fu_253_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln84_fu_253_p1 : STD_LOGIC_VECTOR (64 downto 0);
    signal xor_ln54_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln58_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln59_fu_278_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal sub_ln57_fu_273_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal and_ln54_fu_268_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln61_fu_282_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal select_ln58_fu_290_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal select_ln58_1_fu_298_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal select_ln58_2_fu_305_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal sext_ln64_1_fu_320_p1 : STD_LOGIC_VECTOR (104 downto 0);
    signal sext_ln64_2_fu_323_p1 : STD_LOGIC_VECTOR (104 downto 0);
    signal shl_ln64_1_fu_336_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal shl_ln64_1_fu_336_p3 : STD_LOGIC_VECTOR (168 downto 0);
    signal sext_ln64_4_fu_343_p1 : STD_LOGIC_VECTOR (172 downto 0);
    signal sext_ln64_5_fu_347_p1 : STD_LOGIC_VECTOR (172 downto 0);
    signal add_ln64_1_fu_350_p2 : STD_LOGIC_VECTOR (172 downto 0);
    signal select_ln66_fu_371_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal icmp_ln69_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln69_fu_377_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal shl_ln3_fu_401_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal sub_ln74_fu_408_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal shl_ln_fu_463_p3 : STD_LOGIC_VECTOR (89 downto 0);
    signal sext_ln83_2_fu_471_p1 : STD_LOGIC_VECTOR (110 downto 0);
    signal shl_ln1_fu_484_p3 : STD_LOGIC_VECTOR (89 downto 0);
    signal sext_ln84_2_fu_492_p1 : STD_LOGIC_VECTOR (110 downto 0);
    signal shl_ln83_1_fu_509_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln83_1_fu_509_p3 : STD_LOGIC_VECTOR (183 downto 0);
    signal sext_ln83_4_fu_516_p1 : STD_LOGIC_VECTOR (183 downto 0);
    signal add_ln83_1_fu_519_p2 : STD_LOGIC_VECTOR (183 downto 0);
    signal shl_ln84_1_fu_545_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln84_1_fu_545_p3 : STD_LOGIC_VECTOR (183 downto 0);
    signal sext_ln84_4_fu_552_p1 : STD_LOGIC_VECTOR (183 downto 0);
    signal add_ln84_1_fu_555_p2 : STD_LOGIC_VECTOR (183 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (27 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component dab_top_mul_49s_37ns_84_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (48 downto 0);
        din1 : IN STD_LOGIC_VECTOR (36 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (83 downto 0) );
    end component;


    component dab_top_mul_65s_48ns_111_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (64 downto 0);
        din1 : IN STD_LOGIC_VECTOR (47 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (110 downto 0) );
    end component;


    component dab_top_mul_105s_69ns_172_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (104 downto 0);
        din1 : IN STD_LOGIC_VECTOR (68 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (171 downto 0) );
    end component;


    component dab_top_mul_111s_65ns_175_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (110 downto 0);
        din1 : IN STD_LOGIC_VECTOR (64 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (174 downto 0) );
    end component;


    component dab_top_mul_111s_67ns_177_5_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (110 downto 0);
        din1 : IN STD_LOGIC_VECTOR (66 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (176 downto 0) );
    end component;



begin
    mul_49s_37ns_84_5_1_U1 : component dab_top_mul_49s_37ns_84_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 49,
        din1_WIDTH => 37,
        dout_WIDTH => 84)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => solver_xL,
        din1 => grp_fu_178_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_178_p2);

    mul_65s_48ns_111_5_1_U2 : component dab_top_mul_65s_48ns_111_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 65,
        din1_WIDTH => 48,
        dout_WIDTH => 111)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub_ln83_reg_652,
        din1 => grp_fu_183_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_183_p2);

    mul_65s_48ns_111_5_1_U3 : component dab_top_mul_65s_48ns_111_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 65,
        din1_WIDTH => 48,
        dout_WIDTH => 111)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sub_ln84_reg_657,
        din1 => grp_fu_188_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_188_p2);

    mul_105s_69ns_172_5_1_U4 : component dab_top_mul_105s_69ns_172_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 105,
        din1_WIDTH => 69,
        dout_WIDTH => 172)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln64_reg_672,
        din1 => grp_fu_193_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_193_p2);

    mul_111s_65ns_175_5_1_U5 : component dab_top_mul_111s_65ns_175_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 111,
        din1_WIDTH => 65,
        dout_WIDTH => 175)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln83_reg_724,
        din1 => grp_fu_198_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_198_p2);

    mul_111s_67ns_177_5_1_U6 : component dab_top_mul_111s_67ns_177_5_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 111,
        din1_WIDTH => 67,
        dout_WIDTH => 177)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => add_ln84_reg_729,
        din1 => grp_fu_203_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_203_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    solver_xC1_loc_0_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((solver_state_load_reg_620 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                solver_xC1_loc_0_reg_146 <= solver_xC1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                solver_xC1_loc_0_reg_146 <= trunc_ln_reg_754;
            end if; 
        end if;
    end process;

    solver_xC2_loc_0_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((solver_state_load_reg_620 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                solver_xC2_loc_0_reg_156 <= solver_xC2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                solver_xC2_loc_0_reg_156 <= trunc_ln1_reg_759;
            end if; 
        end if;
    end process;

    solver_xL_loc_0_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((solver_state_load_reg_620 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                solver_xL_loc_0_reg_137 <= select_ln69_reg_698;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                solver_xL_loc_0_reg_137 <= solver_xL_load_reg_630;
            end if; 
        end if;
    end process;

    storemerge_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((solver_state_load_reg_620 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                storemerge_reg_166 <= ap_const_lv1_1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                storemerge_reg_166 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((solver_state_load_load_fu_208_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln55_reg_641 <= add_ln55_fu_232_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln64_reg_672 <= add_ln64_fu_326_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                add_ln83_reg_724 <= add_ln83_fu_475_p2;
                add_ln84_reg_729 <= add_ln84_fu_496_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                icmp_ln66_reg_693 <= icmp_ln66_fu_366_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                mul_ln64_1_reg_682 <= grp_fu_193_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                mul_ln64_reg_667 <= grp_fu_178_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                mul_ln83_1_reg_744 <= grp_fu_198_p2;
                mul_ln84_1_reg_749 <= grp_fu_203_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                mul_ln83_reg_714 <= grp_fu_183_p2;
                mul_ln84_reg_719 <= grp_fu_188_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                select_ln69_reg_698 <= select_ln69_fu_387_p3;
                solver_xL <= select_ln69_fu_387_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    shl_ln2_reg_662(103 downto 41) <= shl_ln2_fu_312_p3(103 downto 41);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((solver_state_load_reg_620 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    solver_iJ_0(49 downto 1) <= select_ln74_fu_414_p3(49 downto 1);
                    solver_iJ_1(49 downto 1) <= select_ln75_fu_427_p3(49 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                solver_state <= ap_phi_mux_storemerge_phi_fu_170_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                solver_state_load_reg_620 <= solver_state;
                solver_xL_load_reg_630 <= solver_xL;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                solver_vE_0 <= add_ln83_1_fu_519_p2(182 downto 120);
                solver_vE_1 <= add_ln84_1_fu_555_p2(182 downto 120);
                solver_xC1 <= add_ln83_1_fu_519_p2(183 downto 120);
                solver_xC2 <= add_ln84_1_fu_555_p2(183 downto 120);
                trunc_ln1_reg_759 <= add_ln84_1_fu_555_p2(183 downto 120);
                trunc_ln_reg_754 <= add_ln83_1_fu_519_p2(183 downto 120);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((solver_state_load_load_fu_208_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                sub_ln83_reg_652 <= sub_ln83_fu_247_p2;
                sub_ln84_reg_657 <= sub_ln84_fu_257_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                trunc_ln3_reg_687 <= add_ln64_1_fu_350_p2(172 downto 120);
            end if;
        end if;
    end process;
    solver_iJ_0(0) <= '0';
    solver_iJ_1(0) <= '0';
    shl_ln2_reg_662(40 downto 0) <= "00000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, solver_state_load_load_fu_208_p1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((solver_state_load_load_fu_208_p1 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                elsif (((solver_state_load_load_fu_208_p1 = ap_const_lv1_0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln55_fu_232_p2 <= std_logic_vector(unsigned(solver_vE_1) + unsigned(solver_vE_0));
    add_ln64_1_fu_350_p2 <= std_logic_vector(signed(sext_ln64_4_fu_343_p1) + signed(sext_ln64_5_fu_347_p1));
    add_ln64_fu_326_p2 <= std_logic_vector(signed(sext_ln64_1_fu_320_p1) + signed(sext_ln64_2_fu_323_p1));
    add_ln83_1_fu_519_p2 <= std_logic_vector(unsigned(shl_ln83_1_fu_509_p3) + unsigned(sext_ln83_4_fu_516_p1));
    add_ln83_fu_475_p2 <= std_logic_vector(signed(sext_ln83_2_fu_471_p1) + signed(mul_ln83_reg_714));
    add_ln84_1_fu_555_p2 <= std_logic_vector(unsigned(shl_ln84_1_fu_545_p3) + unsigned(sext_ln84_4_fu_552_p1));
    add_ln84_fu_496_p2 <= std_logic_vector(signed(sext_ln84_2_fu_492_p1) + signed(mul_ln84_reg_719));
    and_ln54_fu_268_p2 <= (xor_ln54_fu_263_p2 and s1);
    and_ln58_fu_286_p2 <= (s2 and s1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_solver_xC1_loc_0_phi_fu_149_p4_assign_proc : process(solver_xC1, solver_state_load_reg_620, ap_CS_fsm_state15, solver_xC1_loc_0_reg_146)
    begin
        if (((solver_state_load_reg_620 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            ap_phi_mux_solver_xC1_loc_0_phi_fu_149_p4 <= solver_xC1;
        else 
            ap_phi_mux_solver_xC1_loc_0_phi_fu_149_p4 <= solver_xC1_loc_0_reg_146;
        end if; 
    end process;


    ap_phi_mux_solver_xC2_loc_0_phi_fu_159_p4_assign_proc : process(solver_xC2, solver_state_load_reg_620, ap_CS_fsm_state15, solver_xC2_loc_0_reg_156)
    begin
        if (((solver_state_load_reg_620 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            ap_phi_mux_solver_xC2_loc_0_phi_fu_159_p4 <= solver_xC2;
        else 
            ap_phi_mux_solver_xC2_loc_0_phi_fu_159_p4 <= solver_xC2_loc_0_reg_156;
        end if; 
    end process;


    ap_phi_mux_solver_xL_loc_0_phi_fu_140_p4_assign_proc : process(solver_state_load_reg_620, select_ln69_reg_698, solver_xL_loc_0_reg_137, ap_CS_fsm_state15)
    begin
        if (((solver_state_load_reg_620 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            ap_phi_mux_solver_xL_loc_0_phi_fu_140_p4 <= select_ln69_reg_698;
        else 
            ap_phi_mux_solver_xL_loc_0_phi_fu_140_p4 <= solver_xL_loc_0_reg_137;
        end if; 
    end process;


    ap_phi_mux_storemerge_phi_fu_170_p4_assign_proc : process(solver_state_load_reg_620, ap_CS_fsm_state15, storemerge_reg_166)
    begin
        if (((solver_state_load_reg_620 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            ap_phi_mux_storemerge_phi_fu_170_p4 <= ap_const_lv1_1;
        else 
            ap_phi_mux_storemerge_phi_fu_170_p4 <= storemerge_reg_166;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_178_p1 <= ap_const_lv84_A3D70A3D4(37 - 1 downto 0);
    grp_fu_183_p1 <= ap_const_lv111_640000000000(48 - 1 downto 0);
    grp_fu_188_p1 <= ap_const_lv111_640000000000(48 - 1 downto 0);
    grp_fu_193_p1 <= ap_const_lv172_lc_1(69 - 1 downto 0);
    grp_fu_198_p1 <= ap_const_lv175_lc_2(65 - 1 downto 0);
    grp_fu_203_p1 <= ap_const_lv177_lc_3(67 - 1 downto 0);
    icmp_ln66_fu_366_p2 <= "1" when (signed(trunc_ln3_reg_687) < signed(ap_const_lv53_1F6A0000000000)) else "0";
    icmp_ln69_fu_381_p2 <= "1" when (signed(select_ln66_fu_371_p3) > signed(ap_const_lv53_6E0000000000)) else "0";
    out_xC1 <= ap_phi_mux_solver_xC1_loc_0_phi_fu_149_p4;

    out_xC1_ap_vld_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            out_xC1_ap_vld <= ap_const_logic_1;
        else 
            out_xC1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_xC2 <= ap_phi_mux_solver_xC2_loc_0_phi_fu_159_p4;

    out_xC2_ap_vld_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            out_xC2_ap_vld <= ap_const_logic_1;
        else 
            out_xC2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        out_xL <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_solver_xL_loc_0_phi_fu_140_p4),64));


    out_xL_ap_vld_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            out_xL_ap_vld <= ap_const_logic_1;
        else 
            out_xL_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln58_1_fu_298_p3 <= 
        add_ln55_reg_641 when (and_ln54_fu_268_p2(0) = '1') else 
        sub_ln61_fu_282_p2;
    select_ln58_2_fu_305_p3 <= 
        select_ln58_fu_290_p3 when (s2(0) = '1') else 
        select_ln58_1_fu_298_p3;
    select_ln58_fu_290_p3 <= 
        sub_ln59_fu_278_p2 when (and_ln58_fu_286_p2(0) = '1') else 
        sub_ln57_fu_273_p2;
    select_ln66_fu_371_p3 <= 
        ap_const_lv53_1F6A0000000000 when (icmp_ln66_reg_693(0) = '1') else 
        trunc_ln3_reg_687;
    select_ln69_fu_387_p3 <= 
        ap_const_lv49_6E0000000000 when (icmp_ln69_fu_381_p2(0) = '1') else 
        trunc_ln69_fu_377_p1;
    select_ln74_fu_414_p3 <= 
        shl_ln3_fu_401_p3 when (s1(0) = '1') else 
        sub_ln74_fu_408_p2;
    select_ln75_fu_427_p3 <= 
        shl_ln3_fu_401_p3 when (s2(0) = '1') else 
        sub_ln74_fu_408_p2;
        sext_ln64_1_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln2_reg_662),105));

        sext_ln64_2_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln64_reg_667),105));

        sext_ln64_4_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln64_1_fu_336_p3),173));

        sext_ln64_5_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln64_1_reg_682),173));

        sext_ln83_2_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_463_p3),111));

        sext_ln83_4_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln83_1_reg_744),184));

    sext_ln83_fu_243_p0 <= solver_xC1;
        sext_ln83_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln83_fu_243_p0),65));

        sext_ln84_2_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1_fu_484_p3),111));

        sext_ln84_4_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln84_1_reg_749),184));

    sext_ln84_fu_253_p0 <= solver_xC2;
        sext_ln84_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln84_fu_253_p0),65));

    shl_ln1_fu_484_p3 <= (solver_iJ_1 & ap_const_lv40_0);
    shl_ln2_fu_312_p3 <= (select_ln58_2_fu_305_p3 & ap_const_lv41_0);
    shl_ln3_fu_401_p3 <= (select_ln69_reg_698 & ap_const_lv1_0);
    shl_ln64_1_fu_336_p1 <= solver_xL;
    shl_ln64_1_fu_336_p3 <= (shl_ln64_1_fu_336_p1 & ap_const_lv120_0);
    shl_ln83_1_fu_509_p1 <= solver_xC1;
    shl_ln83_1_fu_509_p3 <= (shl_ln83_1_fu_509_p1 & ap_const_lv120_0);
    shl_ln84_1_fu_545_p1 <= solver_xC2;
    shl_ln84_1_fu_545_p3 <= (shl_ln84_1_fu_545_p1 & ap_const_lv120_0);
    shl_ln_fu_463_p3 <= (solver_iJ_0 & ap_const_lv40_0);
    solver_state_load_load_fu_208_p1 <= solver_state;
    sub_ln57_fu_273_p2 <= std_logic_vector(unsigned(ap_const_lv63_0) - unsigned(add_ln55_reg_641));
    sub_ln59_fu_278_p2 <= std_logic_vector(unsigned(solver_vE_1) - unsigned(solver_vE_0));
    sub_ln61_fu_282_p2 <= std_logic_vector(unsigned(solver_vE_0) - unsigned(solver_vE_1));
    sub_ln74_fu_408_p2 <= std_logic_vector(unsigned(ap_const_lv50_0) - unsigned(shl_ln3_fu_401_p3));
    sub_ln83_fu_247_p2 <= std_logic_vector(unsigned(ap_const_lv65_2580000000000) - unsigned(sext_ln83_fu_243_p1));
    sub_ln84_fu_257_p2 <= std_logic_vector(unsigned(ap_const_lv65_1900000000000) - unsigned(sext_ln84_fu_253_p1));
    trunc_ln69_fu_377_p1 <= select_ln66_fu_371_p3(49 - 1 downto 0);
    xor_ln54_fu_263_p2 <= (s2 xor ap_const_lv1_1);
end behav;
