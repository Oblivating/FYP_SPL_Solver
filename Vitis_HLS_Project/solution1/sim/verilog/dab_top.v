// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dab_top_dab_top,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.994065,HLS_SYN_LAT=14,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=4841,HLS_SYN_LUT=3465,HLS_VERSION=2023_1}" *)

module dab_top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        s1,
        s2,
        out_xL,
        out_xL_ap_vld,
        out_xC1,
        out_xC1_ap_vld,
        out_xC2,
        out_xC2_ap_vld
);

parameter    ap_ST_fsm_state1 = 28'd1;
parameter    ap_ST_fsm_state2 = 28'd2;
parameter    ap_ST_fsm_state3 = 28'd4;
parameter    ap_ST_fsm_state4 = 28'd8;
parameter    ap_ST_fsm_state5 = 28'd16;
parameter    ap_ST_fsm_state6 = 28'd32;
parameter    ap_ST_fsm_state7 = 28'd64;
parameter    ap_ST_fsm_state8 = 28'd128;
parameter    ap_ST_fsm_state9 = 28'd256;
parameter    ap_ST_fsm_state10 = 28'd512;
parameter    ap_ST_fsm_state11 = 28'd1024;
parameter    ap_ST_fsm_state12 = 28'd2048;
parameter    ap_ST_fsm_state13 = 28'd4096;
parameter    ap_ST_fsm_state14 = 28'd8192;
parameter    ap_ST_fsm_state15 = 28'd16384;
parameter    ap_ST_fsm_state16 = 28'd32768;
parameter    ap_ST_fsm_state17 = 28'd65536;
parameter    ap_ST_fsm_state18 = 28'd131072;
parameter    ap_ST_fsm_state19 = 28'd262144;
parameter    ap_ST_fsm_state20 = 28'd524288;
parameter    ap_ST_fsm_state21 = 28'd1048576;
parameter    ap_ST_fsm_state22 = 28'd2097152;
parameter    ap_ST_fsm_state23 = 28'd4194304;
parameter    ap_ST_fsm_state24 = 28'd8388608;
parameter    ap_ST_fsm_state25 = 28'd16777216;
parameter    ap_ST_fsm_state26 = 28'd33554432;
parameter    ap_ST_fsm_state27 = 28'd67108864;
parameter    ap_ST_fsm_state28 = 28'd134217728;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [0:0] s1;
input  [0:0] s2;
output  [63:0] out_xL;
output   out_xL_ap_vld;
output  [63:0] out_xC1;
output   out_xC1_ap_vld;
output  [63:0] out_xC2;
output   out_xC2_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_xL_ap_vld;
reg out_xC1_ap_vld;
reg out_xC2_ap_vld;

(* fsm_encoding = "none" *) reg   [27:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [0:0] solver_state;
reg   [62:0] solver_vE_0;
reg   [62:0] solver_vE_1;
reg  signed [48:0] solver_xL;
reg   [63:0] solver_xC1;
reg   [63:0] solver_xC2;
reg   [49:0] solver_iJ_0;
reg   [49:0] solver_iJ_1;
wire   [0:0] solver_state_load_load_fu_208_p1;
reg   [0:0] solver_state_load_reg_620;
reg  signed [48:0] solver_xL_load_reg_630;
wire   [62:0] add_ln55_fu_232_p2;
reg   [62:0] add_ln55_reg_641;
wire   [64:0] sub_ln83_fu_247_p2;
reg  signed [64:0] sub_ln83_reg_652;
wire   [64:0] sub_ln84_fu_257_p2;
reg  signed [64:0] sub_ln84_reg_657;
wire   [103:0] shl_ln2_fu_312_p3;
reg   [103:0] shl_ln2_reg_662;
wire    ap_CS_fsm_state2;
wire   [83:0] grp_fu_178_p2;
reg   [83:0] mul_ln64_reg_667;
wire    ap_CS_fsm_state5;
wire   [104:0] add_ln64_fu_326_p2;
reg  signed [104:0] add_ln64_reg_672;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [171:0] grp_fu_193_p2;
reg   [171:0] mul_ln64_1_reg_682;
wire    ap_CS_fsm_state11;
reg   [52:0] trunc_ln3_reg_687;
wire    ap_CS_fsm_state12;
wire   [0:0] icmp_ln66_fu_366_p2;
reg   [0:0] icmp_ln66_reg_693;
wire    ap_CS_fsm_state13;
wire   [48:0] select_ln69_fu_387_p3;
reg   [48:0] select_ln69_reg_698;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state16;
wire   [110:0] grp_fu_183_p2;
reg   [110:0] mul_ln83_reg_714;
wire    ap_CS_fsm_state20;
wire   [110:0] grp_fu_188_p2;
reg   [110:0] mul_ln84_reg_719;
wire   [110:0] add_ln83_fu_475_p2;
reg  signed [110:0] add_ln83_reg_724;
wire    ap_CS_fsm_state21;
wire   [110:0] add_ln84_fu_496_p2;
reg  signed [110:0] add_ln84_reg_729;
wire    ap_CS_fsm_state22;
wire   [174:0] grp_fu_198_p2;
reg   [174:0] mul_ln83_1_reg_744;
wire    ap_CS_fsm_state26;
wire   [176:0] grp_fu_203_p2;
reg   [176:0] mul_ln84_1_reg_749;
reg   [63:0] trunc_ln_reg_754;
wire    ap_CS_fsm_state27;
reg   [63:0] trunc_ln1_reg_759;
reg   [48:0] ap_phi_mux_solver_xL_loc_0_phi_fu_140_p4;
reg   [48:0] solver_xL_loc_0_reg_137;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state15;
reg   [63:0] ap_phi_mux_solver_xC1_loc_0_phi_fu_149_p4;
reg   [63:0] solver_xC1_loc_0_reg_146;
reg   [63:0] ap_phi_mux_solver_xC2_loc_0_phi_fu_159_p4;
reg   [63:0] solver_xC2_loc_0_reg_156;
reg   [0:0] ap_phi_mux_storemerge_phi_fu_170_p4;
reg   [0:0] storemerge_reg_166;
wire   [49:0] select_ln74_fu_414_p3;
wire   [49:0] select_ln75_fu_427_p3;
wire   [36:0] grp_fu_178_p1;
wire   [47:0] grp_fu_183_p1;
wire   [47:0] grp_fu_188_p1;
wire   [68:0] grp_fu_193_p1;
wire   [64:0] grp_fu_198_p1;
wire   [66:0] grp_fu_203_p1;
wire  signed [63:0] sext_ln83_fu_243_p0;
wire  signed [64:0] sext_ln83_fu_243_p1;
wire  signed [63:0] sext_ln84_fu_253_p0;
wire  signed [64:0] sext_ln84_fu_253_p1;
wire   [0:0] xor_ln54_fu_263_p2;
wire   [0:0] and_ln58_fu_286_p2;
wire   [62:0] sub_ln59_fu_278_p2;
wire   [62:0] sub_ln57_fu_273_p2;
wire   [0:0] and_ln54_fu_268_p2;
wire   [62:0] sub_ln61_fu_282_p2;
wire   [62:0] select_ln58_fu_290_p3;
wire   [62:0] select_ln58_1_fu_298_p3;
wire   [62:0] select_ln58_2_fu_305_p3;
wire  signed [104:0] sext_ln64_1_fu_320_p1;
wire  signed [104:0] sext_ln64_2_fu_323_p1;
wire  signed [48:0] shl_ln64_1_fu_336_p1;
wire   [168:0] shl_ln64_1_fu_336_p3;
wire  signed [172:0] sext_ln64_4_fu_343_p1;
wire  signed [172:0] sext_ln64_5_fu_347_p1;
wire   [172:0] add_ln64_1_fu_350_p2;
wire   [52:0] select_ln66_fu_371_p3;
wire   [0:0] icmp_ln69_fu_381_p2;
wire   [48:0] trunc_ln69_fu_377_p1;
wire   [49:0] shl_ln3_fu_401_p3;
wire   [49:0] sub_ln74_fu_408_p2;
wire   [89:0] shl_ln_fu_463_p3;
wire  signed [110:0] sext_ln83_2_fu_471_p1;
wire   [89:0] shl_ln1_fu_484_p3;
wire  signed [110:0] sext_ln84_2_fu_492_p1;
wire  signed [63:0] shl_ln83_1_fu_509_p1;
wire   [183:0] shl_ln83_1_fu_509_p3;
wire  signed [183:0] sext_ln83_4_fu_516_p1;
wire   [183:0] add_ln83_1_fu_519_p2;
wire  signed [63:0] shl_ln84_1_fu_545_p1;
wire   [183:0] shl_ln84_1_fu_545_p3;
wire  signed [183:0] sext_ln84_4_fu_552_p1;
wire   [183:0] add_ln84_1_fu_555_p2;
reg   [27:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 28'd1;
#0 solver_state = 1'd0;
#0 solver_vE_0 = 63'd0;
#0 solver_vE_1 = 63'd0;
#0 solver_xL = 49'd0;
#0 solver_xC1 = 64'd0;
#0 solver_xC2 = 64'd0;
#0 solver_iJ_0 = 50'd0;
#0 solver_iJ_1 = 50'd0;
end

dab_top_mul_49s_37ns_84_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 49 ),
    .din1_WIDTH( 37 ),
    .dout_WIDTH( 84 ))
mul_49s_37ns_84_5_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(solver_xL),
    .din1(grp_fu_178_p1),
    .ce(1'b1),
    .dout(grp_fu_178_p2)
);

dab_top_mul_65s_48ns_111_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 65 ),
    .din1_WIDTH( 48 ),
    .dout_WIDTH( 111 ))
mul_65s_48ns_111_5_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sub_ln83_reg_652),
    .din1(grp_fu_183_p1),
    .ce(1'b1),
    .dout(grp_fu_183_p2)
);

dab_top_mul_65s_48ns_111_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 65 ),
    .din1_WIDTH( 48 ),
    .dout_WIDTH( 111 ))
mul_65s_48ns_111_5_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sub_ln84_reg_657),
    .din1(grp_fu_188_p1),
    .ce(1'b1),
    .dout(grp_fu_188_p2)
);

dab_top_mul_105s_69ns_172_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 105 ),
    .din1_WIDTH( 69 ),
    .dout_WIDTH( 172 ))
mul_105s_69ns_172_5_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln64_reg_672),
    .din1(grp_fu_193_p1),
    .ce(1'b1),
    .dout(grp_fu_193_p2)
);

dab_top_mul_111s_65ns_175_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 111 ),
    .din1_WIDTH( 65 ),
    .dout_WIDTH( 175 ))
mul_111s_65ns_175_5_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln83_reg_724),
    .din1(grp_fu_198_p1),
    .ce(1'b1),
    .dout(grp_fu_198_p2)
);

dab_top_mul_111s_67ns_177_5_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 111 ),
    .din1_WIDTH( 67 ),
    .dout_WIDTH( 177 ))
mul_111s_67ns_177_5_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(add_ln84_reg_729),
    .din1(grp_fu_203_p1),
    .ce(1'b1),
    .dout(grp_fu_203_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((solver_state_load_reg_620 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        solver_xC1_loc_0_reg_146 <= solver_xC1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        solver_xC1_loc_0_reg_146 <= trunc_ln_reg_754;
    end
end

always @ (posedge ap_clk) begin
    if (((solver_state_load_reg_620 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        solver_xC2_loc_0_reg_156 <= solver_xC2;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        solver_xC2_loc_0_reg_156 <= trunc_ln1_reg_759;
    end
end

always @ (posedge ap_clk) begin
    if (((solver_state_load_reg_620 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        solver_xL_loc_0_reg_137 <= select_ln69_reg_698;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        solver_xL_loc_0_reg_137 <= solver_xL_load_reg_630;
    end
end

always @ (posedge ap_clk) begin
    if (((solver_state_load_reg_620 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        storemerge_reg_166 <= 1'd1;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        storemerge_reg_166 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((solver_state_load_load_fu_208_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln55_reg_641 <= add_ln55_fu_232_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln64_reg_672 <= add_ln64_fu_326_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        add_ln83_reg_724 <= add_ln83_fu_475_p2;
        add_ln84_reg_729 <= add_ln84_fu_496_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        icmp_ln66_reg_693 <= icmp_ln66_fu_366_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        mul_ln64_1_reg_682 <= grp_fu_193_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        mul_ln64_reg_667 <= grp_fu_178_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        mul_ln83_1_reg_744 <= grp_fu_198_p2;
        mul_ln84_1_reg_749 <= grp_fu_203_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        mul_ln83_reg_714 <= grp_fu_183_p2;
        mul_ln84_reg_719 <= grp_fu_188_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        select_ln69_reg_698 <= select_ln69_fu_387_p3;
        solver_xL <= select_ln69_fu_387_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        shl_ln2_reg_662[103 : 41] <= shl_ln2_fu_312_p3[103 : 41];
    end
end

always @ (posedge ap_clk) begin
    if (((solver_state_load_reg_620 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        solver_iJ_0[49 : 1] <= select_ln74_fu_414_p3[49 : 1];
        solver_iJ_1[49 : 1] <= select_ln75_fu_427_p3[49 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        solver_state <= ap_phi_mux_storemerge_phi_fu_170_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        solver_state_load_reg_620 <= solver_state;
        solver_xL_load_reg_630 <= solver_xL;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        solver_vE_0 <= {{add_ln83_1_fu_519_p2[182:120]}};
        solver_vE_1 <= {{add_ln84_1_fu_555_p2[182:120]}};
        solver_xC1 <= {{add_ln83_1_fu_519_p2[183:120]}};
        solver_xC2 <= {{add_ln84_1_fu_555_p2[183:120]}};
        trunc_ln1_reg_759 <= {{add_ln84_1_fu_555_p2[183:120]}};
        trunc_ln_reg_754 <= {{add_ln83_1_fu_519_p2[183:120]}};
    end
end

always @ (posedge ap_clk) begin
    if (((solver_state_load_load_fu_208_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        sub_ln83_reg_652 <= sub_ln83_fu_247_p2;
        sub_ln84_reg_657 <= sub_ln84_fu_257_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        trunc_ln3_reg_687 <= {{add_ln64_1_fu_350_p2[172:120]}};
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((solver_state_load_reg_620 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        ap_phi_mux_solver_xC1_loc_0_phi_fu_149_p4 = solver_xC1;
    end else begin
        ap_phi_mux_solver_xC1_loc_0_phi_fu_149_p4 = solver_xC1_loc_0_reg_146;
    end
end

always @ (*) begin
    if (((solver_state_load_reg_620 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        ap_phi_mux_solver_xC2_loc_0_phi_fu_159_p4 = solver_xC2;
    end else begin
        ap_phi_mux_solver_xC2_loc_0_phi_fu_159_p4 = solver_xC2_loc_0_reg_156;
    end
end

always @ (*) begin
    if (((solver_state_load_reg_620 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        ap_phi_mux_solver_xL_loc_0_phi_fu_140_p4 = select_ln69_reg_698;
    end else begin
        ap_phi_mux_solver_xL_loc_0_phi_fu_140_p4 = solver_xL_loc_0_reg_137;
    end
end

always @ (*) begin
    if (((solver_state_load_reg_620 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        ap_phi_mux_storemerge_phi_fu_170_p4 = 1'd1;
    end else begin
        ap_phi_mux_storemerge_phi_fu_170_p4 = storemerge_reg_166;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        out_xC1_ap_vld = 1'b1;
    end else begin
        out_xC1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        out_xC2_ap_vld = 1'b1;
    end else begin
        out_xC2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        out_xL_ap_vld = 1'b1;
    end else begin
        out_xL_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((solver_state_load_load_fu_208_p1 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else if (((solver_state_load_load_fu_208_p1 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln55_fu_232_p2 = (solver_vE_1 + solver_vE_0);

assign add_ln64_1_fu_350_p2 = ($signed(sext_ln64_4_fu_343_p1) + $signed(sext_ln64_5_fu_347_p1));

assign add_ln64_fu_326_p2 = ($signed(sext_ln64_1_fu_320_p1) + $signed(sext_ln64_2_fu_323_p1));

assign add_ln83_1_fu_519_p2 = ($signed(shl_ln83_1_fu_509_p3) + $signed(sext_ln83_4_fu_516_p1));

assign add_ln83_fu_475_p2 = ($signed(sext_ln83_2_fu_471_p1) + $signed(mul_ln83_reg_714));

assign add_ln84_1_fu_555_p2 = ($signed(shl_ln84_1_fu_545_p3) + $signed(sext_ln84_4_fu_552_p1));

assign add_ln84_fu_496_p2 = ($signed(sext_ln84_2_fu_492_p1) + $signed(mul_ln84_reg_719));

assign and_ln54_fu_268_p2 = (xor_ln54_fu_263_p2 & s1);

assign and_ln58_fu_286_p2 = (s2 & s1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign grp_fu_178_p1 = 84'd43980465108;

assign grp_fu_183_p1 = 111'd109951162777600;

assign grp_fu_188_p1 = 111'd109951162777600;

assign grp_fu_193_p1 = 172'd287836439145480081300;

assign grp_fu_198_p1 = 175'd12089130347397120000;

assign grp_fu_203_p1 = 177'd48356521389588480000;

assign icmp_ln66_fu_366_p2 = (($signed(trunc_ln3_reg_687) < $signed(53'd8842272510574592)) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_381_p2 = (($signed(select_ln66_fu_371_p3) > $signed(53'd120946279055360)) ? 1'b1 : 1'b0);

assign out_xC1 = ap_phi_mux_solver_xC1_loc_0_phi_fu_149_p4;

assign out_xC2 = ap_phi_mux_solver_xC2_loc_0_phi_fu_159_p4;

assign out_xL = $signed(ap_phi_mux_solver_xL_loc_0_phi_fu_140_p4);

assign select_ln58_1_fu_298_p3 = ((and_ln54_fu_268_p2[0:0] == 1'b1) ? add_ln55_reg_641 : sub_ln61_fu_282_p2);

assign select_ln58_2_fu_305_p3 = ((s2[0:0] == 1'b1) ? select_ln58_fu_290_p3 : select_ln58_1_fu_298_p3);

assign select_ln58_fu_290_p3 = ((and_ln58_fu_286_p2[0:0] == 1'b1) ? sub_ln59_fu_278_p2 : sub_ln57_fu_273_p2);

assign select_ln66_fu_371_p3 = ((icmp_ln66_reg_693[0:0] == 1'b1) ? 53'd8842272510574592 : trunc_ln3_reg_687);

assign select_ln69_fu_387_p3 = ((icmp_ln69_fu_381_p2[0:0] == 1'b1) ? 49'd120946279055360 : trunc_ln69_fu_377_p1);

assign select_ln74_fu_414_p3 = ((s1[0:0] == 1'b1) ? shl_ln3_fu_401_p3 : sub_ln74_fu_408_p2);

assign select_ln75_fu_427_p3 = ((s2[0:0] == 1'b1) ? shl_ln3_fu_401_p3 : sub_ln74_fu_408_p2);

assign sext_ln64_1_fu_320_p1 = $signed(shl_ln2_reg_662);

assign sext_ln64_2_fu_323_p1 = $signed(mul_ln64_reg_667);

assign sext_ln64_4_fu_343_p1 = $signed(shl_ln64_1_fu_336_p3);

assign sext_ln64_5_fu_347_p1 = $signed(mul_ln64_1_reg_682);

assign sext_ln83_2_fu_471_p1 = $signed(shl_ln_fu_463_p3);

assign sext_ln83_4_fu_516_p1 = $signed(mul_ln83_1_reg_744);

assign sext_ln83_fu_243_p0 = solver_xC1;

assign sext_ln83_fu_243_p1 = sext_ln83_fu_243_p0;

assign sext_ln84_2_fu_492_p1 = $signed(shl_ln1_fu_484_p3);

assign sext_ln84_4_fu_552_p1 = $signed(mul_ln84_1_reg_749);

assign sext_ln84_fu_253_p0 = solver_xC2;

assign sext_ln84_fu_253_p1 = sext_ln84_fu_253_p0;

assign shl_ln1_fu_484_p3 = {{solver_iJ_1}, {40'd0}};

assign shl_ln2_fu_312_p3 = {{select_ln58_2_fu_305_p3}, {41'd0}};

assign shl_ln3_fu_401_p3 = {{select_ln69_reg_698}, {1'd0}};

assign shl_ln64_1_fu_336_p1 = solver_xL;

assign shl_ln64_1_fu_336_p3 = {{shl_ln64_1_fu_336_p1}, {120'd0}};

assign shl_ln83_1_fu_509_p1 = solver_xC1;

assign shl_ln83_1_fu_509_p3 = {{shl_ln83_1_fu_509_p1}, {120'd0}};

assign shl_ln84_1_fu_545_p1 = solver_xC2;

assign shl_ln84_1_fu_545_p3 = {{shl_ln84_1_fu_545_p1}, {120'd0}};

assign shl_ln_fu_463_p3 = {{solver_iJ_0}, {40'd0}};

assign solver_state_load_load_fu_208_p1 = solver_state;

assign sub_ln57_fu_273_p2 = (63'd0 - add_ln55_reg_641);

assign sub_ln59_fu_278_p2 = (solver_vE_1 - solver_vE_0);

assign sub_ln61_fu_282_p2 = (solver_vE_0 - solver_vE_1);

assign sub_ln74_fu_408_p2 = (50'd0 - shl_ln3_fu_401_p3);

assign sub_ln83_fu_247_p2 = ($signed(65'd659706976665600) - $signed(sext_ln83_fu_243_p1));

assign sub_ln84_fu_257_p2 = ($signed(65'd439804651110400) - $signed(sext_ln84_fu_253_p1));

assign trunc_ln69_fu_377_p1 = select_ln66_fu_371_p3[48:0];

assign xor_ln54_fu_263_p2 = (s2 ^ 1'd1);

always @ (posedge ap_clk) begin
    solver_iJ_0[0] <= 1'b0;
    solver_iJ_1[0] <= 1'b0;
    shl_ln2_reg_662[40:0] <= 41'b00000000000000000000000000000000000000000;
end

endmodule //dab_top
